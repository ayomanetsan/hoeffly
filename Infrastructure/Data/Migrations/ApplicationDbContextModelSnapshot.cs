// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.AccessRights", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WishlistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WishlistId");

                    b.ToTable("AccessRights");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63209aaa-4d62-4c22-bce4-0e12e0b16351"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8496), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "New Year",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("9107c182-c0e0-4c16-a0a6-8a26f935529c"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8500), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Birthday",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("a82dafd3-9ce7-4abc-b661-9b14231c5f73"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8502), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Christmas",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("392eb906-399b-466c-83cc-c4e5bf0b9817"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8503), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Anniversary",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("1c9c49ec-0d78-4344-9742-09d4c9cd3b9f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8505), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Valentine's Day",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("2d7bcea3-f1f1-484c-99cf-aa6469fa3c94"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8506), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Wedding",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("6085bf63-76fe-4922-8c11-2f58e52b0e83"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8507), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Baby Shower",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("432d4160-a5f7-4ae2-b69a-179e238f34fc"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8508), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Graduation",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("9008dd1f-f802-4dce-94de-700141a222ca"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8511), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Housewarming",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("a706d1ca-ba11-4983-8502-681dfe8397ef"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8512), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Retirement",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("3be45b0f-29a4-4a37-aec8-95b05d2d90b0"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8513), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Easter",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("fe5b7096-74e7-4965-a075-c4eeb1c692dc"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8514), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Halloween",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("0b26791d-bc33-43d6-be9e-7e3d2a604035"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8516), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Thanksgiving",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("62b2eb49-5804-43f2-a504-8142e92948c2"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8517), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Black Friday",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("470a612c-c302-4f55-97e2-0c5f31d28d72"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8518), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Summer Vacation",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("7940f4a4-1dbb-405d-803b-bd8fb9863989"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8520), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Home",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("12a20ef1-b470-4ee7-ae35-6a9b9557e171"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8523), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Fashion",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("50d5c9c3-58b8-49ea-a311-b9b38cfd4a73"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8524), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Electronics",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("d1b3a75a-0e79-4cda-bf51-31e2fdb2d738"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8525), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Books",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("22a5bc20-fb4c-47fd-ad6e-141d1b2fa5e5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8526), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Personal Care",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("2e2714fd-65cf-4787-acf5-a8827bd181dc"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8527), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Sports",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("313fa223-734e-4f13-839d-e48bb1f50fac"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8528), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Toys",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("4026bb5d-9408-42a9-8ebd-316861a70c3e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8529), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Jewelry",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("61497b4e-d9fb-46c4-8ebe-e2f08b5e38eb"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8531), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Kitchen",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("dbbe114d-6b94-4e85-bded-52a0ffb617e3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8533), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Experiences",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("f608058f-b075-4dea-a452-4a88002ddb55"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8534), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Wellness",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("ce5365ec-2ebb-4e77-adb0-fb917170e2cb"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8536), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Music",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("aa288927-5460-434c-aee2-42f34877f69a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8537), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Office",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("62f4e9ac-aeb4-4a54-847d-f2183c45a86e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8538), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Garden",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("d0d84232-652b-485c-ace2-999e18c3074b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 17, 13, 1, 20, 507, DateTimeKind.Unspecified).AddTicks(8539), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "system",
                            LastModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = "system",
                            Name = "Gourmet",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Friendship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequesterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("RequesterId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("Domain.Entities.Gift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LikeCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PhotoLink")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("ShopLink")
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailLink")
                        .HasColumnType("text");

                    b.Property<Guid>("WishlistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("WishlistId");

                    b.ToTable("Gifts");
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ReplyToMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WishlistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReplyToMessageId");

                    b.HasIndex("SenderId");

                    b.HasIndex("TeamId");

                    b.HasIndex("WishlistId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Domain.Entities.Occasion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Occasions");
                });

            modelBuilder.Entity("Domain.Entities.SharedGift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GiftId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GiftId");

                    b.HasIndex("UserId");

                    b.ToTable("SharedGifts");
                });

            modelBuilder.Entity("Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WishlistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WishlistId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Domain.Entities.TeamUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamUsers");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirebaseUid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Wishlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("Domain.Entities.WishlistCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WishlistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("WishlistId");

                    b.ToTable("WishlistCategories");
                });

            modelBuilder.Entity("Domain.Entities.AccessRights", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("AccessRights")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Wishlist", "Wishlist")
                        .WithMany("AccessRights")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("Domain.Entities.Friendship", b =>
                {
                    b.HasOne("Domain.Entities.User", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Requester")
                        .WithMany("Friendships")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("Domain.Entities.Gift", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Wishlist", "Wishlist")
                        .WithMany("Gifts")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.HasOne("Domain.Entities.Message", "ReplyToMessage")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyToMessageId");

                    b.HasOne("Domain.Entities.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Team", "Team")
                        .WithMany("Messages")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Wishlist", "Wishlist")
                        .WithMany("Messages")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyToMessage");

                    b.Navigation("Sender");

                    b.Navigation("Team");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("Domain.Entities.Occasion", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Occasions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.SharedGift", b =>
                {
                    b.HasOne("Domain.Entities.Gift", "Gift")
                        .WithMany("SharedGifts")
                        .HasForeignKey("GiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("SharedGifts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gift");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Team", b =>
                {
                    b.HasOne("Domain.Entities.Wishlist", "Wishlist")
                        .WithMany("Teams")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("Domain.Entities.TeamUser", b =>
                {
                    b.HasOne("Domain.Entities.Team", "Team")
                        .WithMany("TeamUsers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("TeamUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.WishlistCategory", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("WishlistCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Wishlist", "Wishlist")
                        .WithMany("WishlistCategories")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("WishlistCategories");
                });

            modelBuilder.Entity("Domain.Entities.Gift", b =>
                {
                    b.Navigation("SharedGifts");
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Domain.Entities.Team", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("TeamUsers");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("AccessRights");

                    b.Navigation("Friendships");

                    b.Navigation("Messages");

                    b.Navigation("Occasions");

                    b.Navigation("SharedGifts");

                    b.Navigation("TeamUsers");
                });

            modelBuilder.Entity("Domain.Entities.Wishlist", b =>
                {
                    b.Navigation("AccessRights");

                    b.Navigation("Gifts");

                    b.Navigation("Messages");

                    b.Navigation("Teams");

                    b.Navigation("WishlistCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
